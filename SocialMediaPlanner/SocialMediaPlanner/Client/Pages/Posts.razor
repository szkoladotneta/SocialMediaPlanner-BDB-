@page "/posts"

@inject IHtmlNotificationService _notificationService
@implements IAsyncDisposable
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource> _localizer

<PageTitle>Social Media Planner Posts</PageTitle>

<HeadContent>
    <meta name="description" content="This is test from posts" />
</HeadContent>

@inject IApiBroker apiBroker;
@using SocialMediaPlanner.Client.Brokers.API
@using SocialMediaPlanner.Client.Shared.Templates
@using SocialMediaPlanner.Shared.Posts.Queries.AllPostsQuery
<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>@_localizer["posts"]</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active">@_localizer["posts"]</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

@*@if (PostList == null || !PostList.Any())
    {
    <p>Loading...</p>
    }
    else
    {*@
<!-- Main content -->
<section class="content">

    <!-- Default box -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">@_localizer["posts"]</h3>

            <div class="card-tools">
                <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                    <i class="fas fa-minus"></i>
                </button>
                <button type="button" class="btn btn-tool" data-card-widget="remove" title="Remove">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <table class="table table-striped projects">
                <thead>
                    <tr>
                        <th style="width: 1%">
                            #
                        </th>
                        <th style="width: 20%">
                            @_localizer["postTitle"]
                        </th>
                        <th>
                            Scheduled Date
                        </th>
                        <th style="width: 8%" class="text-center">
                            Status
                        </th>
                        <th style="width: 20%">
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize ItemsProvider="LoadPosts" Context="item">
                            <tr>
                                <td>
                                    #
                                </td>
                                <td>
                                    <a>
                                        @item.Title
                                    </a>
                                    <br />
                                    <small>
                                        Created @item.CreateDate.Value.ToShortDateString()
                                    </small>
                                </td>
                                <td>
                                    @item.ScheduledDate
                                </td>
                                <td class="project-state">
                                    <span class="badge badge-@SetStatusBadge(item.StatusId)">
                                        @SetStatusValue(item.StatusId)
                                    </span>
                                </td>
                                <td class="project-actions text-right">
                                    <a class="btn btn-primary btn-sm" href="/posts/@item.Id">
                                        <i class="fas fa-folder">
                                        </i>
                                        View
                                    </a>
                                    <a class="btn btn-info btn-sm" href="#">
                                        <i class="fas fa-pencil-alt">
                                        </i>
                                        Edit
                                    </a>
                                    <a class="btn btn-danger btn-sm" href="#">
                                        <i class="fas fa-trash">
                                        </i>
                                        Delete
                                    </a>
                                </td>
                            </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
        <!-- /.card-body -->
    </div>
    <!-- /.card -->

</section>
<!-- /.content -->
@code {
    protected async override Task OnInitializedAsync()
    {
        var options = new HtmlServiceWorkerNotificationOptions("Test Notification", "_content/sw.js")
            {
                Body = "Test Notification body",
                Actions = new NotificationAction[]
                {
            new NotificationAction(){Action="action1", Title="Custom action 1"},
            new NotificationAction(){Action="action2", Title="Custom action 2"}
                }
            };
            await _notificationService.ShowsWithActionsAsync(options);
    }
    	public async ValueTask DisposeAsync()
	{
		if (_notificationService is not null)
		{
			await _notificationService.DisposeAsync();
		}
	}

    protected async ValueTask<ItemsProviderResult<PostForListVm>> LoadPosts(ItemsProviderRequest request)
    {
        var pageSize = request.Count;
        var index = request.StartIndex;
        var items = await apiBroker.GetAllPostsAsync();
        return new ItemsProviderResult<PostForListVm>(items.Skip(index).Take(pageSize), items.Count());
    }
    private string SetStatusValue(int statusId)
    {
        string result;
        switch (statusId)
        {
            case 1:
                result = "Posted";
                break;
            case 2:
                result = "Scheduled";
                break;
            default:
                result = "Draft";
                break;
        }
        return result;
    }
    private string SetStatusBadge(int statusId)
    {
        string result;
        switch (statusId)
        {
            case 1:
                result = "success";
                break;
            case 2:
                result = "warning";
                break;
            default:
                result = "secondary";
                break;
        }
        return result;
    }

    public class Post
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public int StatusId { get; set; }
        public DateTime? ScheduledDate { get; set; }
        public DateTime? CreateDate { get; set; }
        public List<Account> Accounts { get; set; }
    }

    public class Account
    {
        public int Id { get; set; }
        public string AccountName { get; set; } //Social Media Platform
        public string APIKey { get; set; }
        public string APISecret { get; set; }
    }

}
