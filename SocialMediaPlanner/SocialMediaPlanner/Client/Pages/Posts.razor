@page "/posts"

@inject HttpClient http;
@using SocialMediaPlanner.Client.Shared.Templates
@using SocialMediaPlanner.Shared.Posts.Queries.AllPostsQuery
<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Posts</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active">Posts</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

@if (PostList == null || !PostList.Any())
{
    <p>Loading...</p>
}
else
{
    <!-- Main content -->
    <section class="content">

        <!-- Default box -->
    <div class="card">
            <div class="card-header">
                <h3 class="card-title">Posts</h3>

                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-tool" data-card-widget="remove" title="Remove">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <TableTemplate Items="PostList" Context="item">
                    <TableHeader>
                        <th style="width: 1%">
                            #
                        </th>
                        <th style="width: 20%">
                            Title
                        </th>
                        <th>
                            Scheduled Date
                        </th>
                        <th style="width: 8%" class="text-center">
                            Status
                        </th>
                        <th style="width: 20%">
                        </th>
                    </TableHeader>
                    <TableBody>
                        <td>
                            #
                        </td>
                        <td>
                            <a>
                                @item.Title
                            </a>
                            <br />
                            <small>
                                Created @item.CreateDate.Value.ToShortDateString()
                            </small>
                        </td>
                    <td>
                        @item.ScheduledDate
                    </td>
                    <td class="project-state">
                        <span class="badge badge-@SetStatusBadge(item.StatusId)">
                            @SetStatusValue(item.StatusId)
                        </span>
                    </td>
                    <td class="project-actions text-right">
                        <a class="btn btn-primary btn-sm" href="/posts/@item.Id">
                            <i class="fas fa-folder">
                            </i>
                            View
                        </a>
                        <a class="btn btn-info btn-sm" href="#">
                            <i class="fas fa-pencil-alt">
                            </i>
                            Edit
                        </a>
                        <a class="btn btn-danger btn-sm" href="#">
                            <i class="fas fa-trash">
                            </i>
                            Delete
                        </a>
                    </td>
                </TableBody>
            </TableTemplate>
        </div>
        <!-- /.card-body -->
    </div>
    <!-- /.card -->

</section>
    <!-- /.content -->
}
@code {
    public List<PostForListVm> PostList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PostList = await http.GetFromJsonAsync<List<PostForListVm>>("api/posts");
        Console.WriteLine(PostList.Count);
    }

    private string SetStatusValue(int statusId)
    {
        string result;
        switch (statusId)
        {
            case 1:
                result = "Posted";
                break;
            case 2:
                result = "Scheduled";
                break;
            default:
                result = "Draft";
                break;
        }
        return result;
    }
    private string SetStatusBadge(int statusId)
    {
        string result;
        switch (statusId)
        {
            case 1:
                result = "success";
                break;
            case 2:
                result = "warning";
                break;
            default:
                result = "secondary";
                break;
        }
        return result;
    }

    public class Post
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public int StatusId { get; set; }
        public DateTime? ScheduledDate { get; set; }
        public DateTime? CreateDate { get; set; }
        public List<Account> Accounts { get; set; }
    }

    public class Account
    {
        public int Id { get; set; }
        public string AccountName { get; set; } //Social Media Platform
        public string APIKey { get; set; }
        public string APISecret { get; set; }
    }

}
